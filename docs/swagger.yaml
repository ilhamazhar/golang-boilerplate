definitions:
  models.Post:
    properties:
      content:
        type: string
      id:
        type: integer
      title:
        type: string
    type: object
  models.User:
    properties:
      email:
        maxLength: 100
        minLength: 8
        type: string
      id:
        type: integer
      name:
        maxLength: 100
        minLength: 3
        type: string
    required:
    - email
    - name
    type: object
info:
  contact: {}
  description: This is loreme seipsume.
  title: Golang App
  version: "1.0"
paths:
  /api/posts:
    get:
      description: Get post profile data
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Get Posts
      tags:
      - Posts
    post:
      consumes:
      - application/x-www-form-urlencoded
      description: Create a new post
      parameters:
      - description: ' '
        in: formData
        name: title
        required: true
        type: string
      - description: ' '
        in: formData
        name: content
        required: true
        type: string
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Create Post
      tags:
      - Posts
  /api/posts/{id}:
    delete:
      description: Delete post data by ID
      parameters:
      - description: ' '
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Post'
        "404":
          description: Not Found
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Delete post by ID
      tags:
      - Posts
    get:
      description: Get details of a post by ID
      parameters:
      - description: ' '
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Post'
        "404":
          description: Not Found
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Get post by ID
      tags:
      - Posts
    put:
      consumes:
      - application/x-www-form-urlencoded
      description: Update post data by ID
      parameters:
      - description: ' '
        in: path
        name: id
        required: true
        type: integer
      - description: ' '
        in: formData
        name: title
        type: string
      - description: ' '
        in: formData
        name: content
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Post'
        "404":
          description: Not Found
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Update post by ID
      tags:
      - Posts
  /api/public/login:
    post:
      consumes:
      - application/x-www-form-urlencoded
      description: Login to obtain an access token
      parameters:
      - description: ' '
        in: formData
        name: email
        required: true
        type: string
      - description: ' '
        in: formData
        name: password
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Login
      tags:
      - Public
  /api/public/register:
    post:
      consumes:
      - application/x-www-form-urlencoded
      description: Register a new user
      parameters:
      - description: ' '
        in: formData
        name: name
        required: true
        type: string
      - description: ' '
        in: formData
        name: email
        required: true
        type: string
      - description: ' '
        in: formData
        name: password
        required: true
        type: string
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Register User
      tags:
      - Public
  /api/users:
    get:
      description: Get user profile data
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Get Users
      tags:
      - Users
  /api/users/{id}:
    delete:
      description: Delete user data by ID
      parameters:
      - description: ' '
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.User'
        "404":
          description: Not Found
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Delete user by ID
      tags:
      - Users
    get:
      description: Get details of a user by ID
      parameters:
      - description: ' '
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.User'
        "404":
          description: Not Found
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Get user by ID
      tags:
      - Users
    put:
      consumes:
      - application/x-www-form-urlencoded
      description: Update user data by ID
      parameters:
      - description: ' '
        in: path
        name: id
        required: true
        type: integer
      - description: ' '
        in: formData
        name: name
        type: string
      - description: ' '
        in: formData
        name: email
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.User'
        "404":
          description: Not Found
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Update user by ID
      tags:
      - Users
securityDefinitions:
  BearerAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
